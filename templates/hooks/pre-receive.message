#!/usr/bin/env ruby
# Encoding: utf-8

# Description  : Git hook for message policy, according to angular commit format.
# Usage        :
# Dependencies :
# Example      :
# Notes        :
# Source       : http://git-scm.com/book/en/Customizing-Git-An-Example-Git-Enforced-Policy#Server-Side-Hook
# Source       : https://lists.fedoraproject.org/pipermail/devel/2013-September/189126.html

# =====================================================================================================================================
# Helper Variables
# =====================================================================================================================================
@oldrev, @newrev, @refname = STDIN.read.split(" ")
@short_refname = @refname[11..-1]
@zero = "0000000000000000000000000000000000000000"

# =====================================================================================================================================
# Sanity Check Variables
# =====================================================================================================================================
# A sure way fire to get all the refs, even if a branch was just created.
@missed_revs   = `git rev-list #{@newrev} ^#{@oldrev} 2>/dev/null || git rev-list #{@newrev} 2>/dev/null`.split("\n")
@message_regex = /^(feat|fix|docs|style|refactor|test|chore|improve)\((\w+)\)\:\s(.{10,})/

# =====================================================================================================================================
# Enforce Message Policy Rules
# =====================================================================================================================================
puts "\nEnforcing Message Policies... \n(#{@short_refname}) (#{@oldrev[0,6]}) (#{@newrev[0,6]})"

def check_format_rules(rev, line_number, line)
  real_line_number = line_number + 1
  return "Commit #{rev}, line #{real_line_number}: Summary line must be 70 characters or less." if
    line_number == 0 && line.length > 70
  return "Commit #{rev}, line #{real_line_number}: Summary line syntax must be '<type>(<scope>): <subject>'" if
    line_number == 0 && !@message_regex.match(line)
  return "Commit #{rev}, line #{real_line_number}: Second line should be empty." if
    line_number == 1 && line.length > 0
  return "Commit #{rev}, line #{real_line_number}: No line should be over 80 characters long." if
    line.length > 80
  false
end

@errors = []
def check_message_format
  @missed_revs.each do |rev|
    commit_message = `git cat-file commit #{rev} | sed '1,/^$/d'`.split("\n")
    commit_message.each_with_index do |line, line_number|
      error = check_format_rules rev[0,6], line_number, line.strip
      @errors.push error if error
    end
  end
end
check_message_format

# =====================================================================================================================================
# Necessary Fallbacks
# =====================================================================================================================================
# I don't care, if the branch is being deleted.
exit 0 if @newrev[@zero]

# =====================================================================================================================================
# Output Errors, If They Exist
# =====================================================================================================================================
unless @errors.empty?
  puts '[POLICY] Invalid git commit message format.'
  @errors.each { |error| puts "#    #{error}" }
  exit 1
end