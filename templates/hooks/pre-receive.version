#!/usr/bin/env ruby
# Encoding: utf-8

# Description  : Git hook for version policy.
# Usage        :
# Dependencies :
# Example      :
# Notes        :
# Source       : [SemVer](http://semver.org/)
# Source       : [SemVer Control](https://stackoverflow.com/questions/10228073)

require 'semver'
require 'colorize'

# =====================================================================================================================================
# Helper Variables
# =====================================================================================================================================
@oldrev, @newrev, @refname = STDIN.read.split(" ")
@short_refname = @refname[11..-1]
@zero = "0000000000000000000000000000000000000000"
@current_version = `git for-each-ref --format="%(refname)" refs/heads/version 2>/dev/null`
@current_hotfix  = `git for-each-ref --format="%(refname)" refs/heads/hotfix 2>/dev/null`
@other_branchs   = `git for-each-ref --format="%(refname)" refs/heads 2>/dev/null | grep -Fv #{@refname}`

# =====================================================================================================================================
# Sanity Check Variables
# =====================================================================================================================================
@merged_from = "version" if `git rev-list --merges #{@current_version}..master 2>/dev/null`
@merged_from = "hotfix" if `git rev-list --merges #{@current_hotfix}..master 2>/dev/null`
@parent_commit   = `git rev-parse #{@newrev}\^1 2>/dev/null`

# =====================================================================================================================================
# Enforce Message Policy Rules
# =====================================================================================================================================
puts "Enforcing Version Policies...".cyan
puts "(#{@short_refname}) (#{@oldrev[0,6]}) (#{@newrev[0,6]})".cyan

# This hook only applies to master branch. Otherwise move along.
exit 0 if !@short_refname['master']

version = SemVer.new if @oldrev[@zero] && @parent_commit[@newrev]
# version = SemVer.find

puts "#{@parent_commit}"
puts "#{@newrev}"
puts "#{@oldrev}"
puts "#{version}"

def check_version_policy
  errors = []

#   version = SemVer.find
#   puts "#{version}"

# # Version Branch Versioning
# # -------------------------------------------------------------------------------------------------------------------------------------
#   if @merged_from['version']
#     v.minor += 1
#     v.format "%M.%m.%p".to_s.save
#     puts "something"

# # Hotfix Branch Versioning
# # -------------------------------------------------------------------------------------------------------------------------------------
#   if @merged_from['hotfix']
#     puts "something"

# # Otherwise, error.
# # -------------------------------------------------------------------------------------------------------------------------------------
#   else
#     puts "something"
#   end

#   errors
end
errors = check_version_policy

# =====================================================================================================================================
# Output Errors, If They Exist
# =====================================================================================================================================
unless errors.empty?
  puts '[POLICY] Invalid git branch rules.'.cyan
  errors.each { |error| puts "Branch #{@short_refname}: ".yellow + "#{error}".red }
  exit 1
end

exit 1