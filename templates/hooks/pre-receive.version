#!/usr/bin/env ruby
# Encoding: utf-8

# Description  : Git hook for version policy.
# Usage        :
# Dependencies :
# Example      :
# Notes        :
# Source       : (SemVer)[http://semver.org/]
# Source       : (SemVer Control)[https://stackoverflow.com/questions/10228073]

require 'semver'

# =====================================================================================================================================
# Helper Variables
# =====================================================================================================================================
@oldrev, @newrev, @refname = STDIN.read.split(" ")
@short_refname = @refname[11..-1]
@zero = "0000000000000000000000000000000000000000"
@current_version = `git for-each-ref --format="%(refname)" refs/heads/version 2>/dev/null`
@current_hotfix  = `git for-each-ref --format="%(refname)" refs/heads/hotfix 2>/dev/null`
@other_branchs   = `git for-each-ref --format="%(refname)" refs/heads 2>/dev/null | grep -Fv #{@refname}`

# =====================================================================================================================================
# Sanity Check Variables
# =====================================================================================================================================
@merged_from = version if `git rev-list --merges #{@current_version}..master 2>/dev/null`
@merged_from = hotfix if `git rev-list --merges #{@current_hotfix}..master 2>/dev/null`

# =====================================================================================================================================
# Enforce Message Policy Rules
# =====================================================================================================================================
puts "Enforcing Message Policies...".cyan
puts "(#{@short_refname}) (#{@oldrev[0,6]}) (#{@newrev[0,6]})".cyan

# This hook only applies to master branch. Otherwise move along.
exit 0 if !@short_refname['master']

def check_version_policy
  errors = []

# Version Branch Versioning
# -------------------------------------------------------------------------------------------------------------------------------------
  if @merged_from['version']
    v = SemVer.find
    v.minor += 1
    v.format "%M.%m.%p".to_s.save

# Hotfix Branch Versioning
# -------------------------------------------------------------------------------------------------------------------------------------
  if @merged_from['hotfix']

# Otherwise, error.
# -------------------------------------------------------------------------------------------------------------------------------------
  else

  end

  errors
end
errors = check_version_policy

# Hotfix branch must be merged both to master and rebased to current version branch
# semVer control on version/hotfix/tags
# Hotfix/* versioning format: 1.0.0-1

# SemVer Sanity Checks
# => SemVer Hotfix < Version
# => SemVer Hotfix_upstream < Hotfix_current
# => SemVer Version_upstream < Version_current

# def resolve_hotfix()
#   git checkout master
#   git merge --no-ff $@short_refname
#   git tag $@short_refname_tag

#   git rebase $current_version_branch} $@short_refname
#   git checkout $current_version_branch
#   git reset --hard $@short_refname
#   git push $current_version_branch

#   git branch -D $@short_refname} && git branch -D origin/$@short_refname
#   git branch --merged master | grep -v "master" | xargs -n 1 git branch -d
# end