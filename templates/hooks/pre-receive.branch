#!/usr/bin/env ruby
# Encoding: utf-8

# Description  : Git hook for branch policy, designed for agile programming.
# Usage        :
# Dependencies :
# Example      :
# Notes        :
# Source       : [Find unqiue refs of a branch](http://stackoverflow.com/a/5724488)
# Source       : [Disable force pushing](http://stackoverflow.com/a/17064462)
# Source       : [Find merged branches](https://coderwall.com/p/fytgoq)

require 'colorize'

# =====================================================================================================================================
# Helper Variables
# =====================================================================================================================================
@oldrev, @newrev, @refname = STDIN.read.split(" ")
@short_refname = @refname[11..-1]
@zero = "0000000000000000000000000000000000000000"
@other_branchs   = `git for-each-ref --format="%(refname)" refs/heads 2>/dev/null | grep -Fv #{@refname}`

# =====================================================================================================================================
# Sanity Check Variables
# =====================================================================================================================================
# A sure way fire to get all the merged refs, even if a branch was just created.
@merge_commits   = `git rev-list --merges #{@newrev} \^#{@oldrev} 2>/dev/null`
@parent_commit   = `git rev-parse #{@newrev}\^1 2>/dev/null`
@is_force_push   = `git merge-base #{@oldrev} #{@newrev} 2>/dev/null`
@unique_revs     = `git rev-list --no-merges #{@newrev} --not #{@other_branchs} 2>/dev/null`
@branch_merged   = `git rev-list --merges #{@refname}..master 2>/dev/null`

# =====================================================================================================================================
# Enforce Branch Policy Rules
# =====================================================================================================================================
puts "Enforcing Branch Policies...".cyan
puts "(#{@short_refname}) (#{@oldrev[0,6]}) (#{@newrev[0,6]})".cyan

def check_branch_policy
  errors = []

# General Branch Policies
# -------------------------------------------------------------------------------------------------------------------------------------
  # (1) Check if someone is trying to force push a branch into remote repo. Unless new branch.
  errors << "Force push is not allowed into this repository." if
    !@is_force_push[@oldrev]

# Master Branch Policies
# -------------------------------------------------------------------------------------------------------------------------------------
  if @short_refname['master']
    # (1) Master should have only one unique commit each time - the merge commit (@newrev).
    # Covers: More than one merge; More than one commit; Non-merge commit.
    errors << "Master branch accepts only non-forwarded merge commits, one at a time." if
      !@merge_commits[@newrev] || !@parent_commit[@oldrev]
    # (2) If not empty, either version/hotfix is not fully updated or a merge was made locall from a different branch.
    errors << "Master branch can only be merged into from a pushed Version or Hotfix branches." if
      !@unique_revs.empty?
    # (3) If repositories' initial commit, allow it.
    exit 0 if @oldrev[@zero] && @parent_commit[@newrev]

# Version/Hotfix Branch Policies
# -------------------------------------------------------------------------------------------------------------------------------------
  else
    # (1) If not empty, it means there's a merge commit - whereas there shouldn't be.
    errors << "Version and Hotfix branches accept only fast-forward/rebased commits." if
      !@merge_commits.empty?
    # (2) If not empty (and was not just created) it means it has already been merged. Unless being deleted.
    errors << "Branch has already been merged. Please check to see if a new branch exists." if
      !@branch_merged.empty?
  end

  errors
end
errors = check_branch_policy

# =====================================================================================================================================
# Output Errors, If They Exist
# =====================================================================================================================================
unless errors.empty?
  puts '[POLICY] Invalid git branch rules.'.cyan
  errors.each { |error| puts "Branch #{@short_refname}: ".yellow + "#{error}".red }
  exit 1
end