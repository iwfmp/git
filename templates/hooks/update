#!/usr/bin/ruby
# Encoding: utf-8
# Source: http://git-scm.com/book/en/Customizing-Git-An-Example-Git-Enforced-Policy#Server-Side-Hook

$refname = ARGV[0]
$oldrev  = ARGV[1]
$newrev  = ARGV[2]
$user    = ENV['USER']

puts "Enforcing Policies... \n(#{$refname}) (#{$oldrev[0,6]}) (#{$newrev[0,6]})"

# -------------------------------------------------------------------------------------------------------------------------------------
# Enforce custom commit-message format
# -------------------------------------------------------------------------------------------------------------------------------------
$regex = /^([Ff]eat|[Ff]ix|[Dd]ocs|[Ss]tyle|[Rr]efactor|[Tt]est|[Cc]hore|[Ii]mprove)\(([a-zA-Z]+)\)\:(.{0,50})$/
errors = []
def check_format_rules(rev, line_number, line)
  real_line_number = line_number + 1
  return "Error. Commit #{rev}, line #{real_line_number}: Summary line must be 70 characters or less." if line_number == 0 && line.length > 70
  return "Error. Commit #{rev}, line #{real_line_number}: Summary line syntax must be '<type>(<scope>): <subject>'" if line_number == 0 && !$regex.match(line)
  return "Error. Commit #{rev}, line #{real_line_number}: Second line should be empty." if line_number == 1 && line.length > 0
  (return "Error. Commit #{rev}, line #{real_line_number}: No line should be over 80 characters long." if line.length > 80) unless line[0,1]  == '#'
  false
end

def check_message_format
  missed_revs = `git rev-list #{$oldrev}..#{$newrev}`.split("\n")
  missed_revs.each do |rev|
    message_file = `git cat-file commit #{rev} | sed '1,/^$/d'`
    File.open(message_file, 'r').each_with_index do |line, line_number|
      e = check_format_rules rev, line_number, line.strip
      errors.push e if e
    end
  end
end
check_message_format

unless errors.empty?
  puts '[POLICY] Invalid git commit message format.'
  errors.each { |error| puts "#    #{error}" }
  exit 1
end